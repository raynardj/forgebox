# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/15_loopstack.ipynb (unless otherwise specified).

__all__ = ['create_event', 'events', 'LoopStack', 'TrainLoop', 'EvalLoop']

# Cell
from .loop import Loop,ProgressBar,Tolerate,Event,Stuff
from types import MethodType
import numpy as np

# Cell
def create_event(event_name):
    class BatchEvent(Event):pass
    BatchEvent.__name__ = event_name
    return BatchEvent

def events(*enames):
    return list(map(create_event,enames))

# Cell
class LoopStack(Loop):
    settings = []
    """
    A stack of loop
    """
    @classmethod
    def from_loops(cls,*loops):
        def init(self,iterable=[],name = None):
            name = name if name!=None else cls.__name__

            self.loops = dict()
            l = Loop(iterable)
            for L in loops:
                l = L(iterable = l)
            super().__init__(iterable = l,
                             name = name)

            for stuff in cls.settings:
                self.make_stuff(stuff)

        setattr(cls,"__init__",init)
        return cls

    @classmethod
    def new_setting(cls,*settings):
        cls.settings+=list(settings)

    def make_stuff(self,name):
        new_stuff = Stuff(name)
        setattr(self.core,name,new_stuff)
        setattr(self,name,new_stuff)

    def __repr__(self,):
        return f"LoopStack>:{self.name}\n\t"+\
            "\n\t".join(map(str,self.core.layers[:-1]))

# Cell
class TrainLoop(LoopStack):
    def __init__(self,data_iter):
        self.from_loops(ProgressBar,Tolerate,
                        *events(*TRAIN_EVENTS))
        self.new_setting("model","opt","loss","hp","cuda")
        self.__init__(data_iter,)

        @self.on_DATA_PROCESS
        def opt_zero_grad(self):
            self.opt.zero_grad()

        @self.before_1st_FORWARD
        def switch_model_to_train(self):
            self.core.model = self.core.model.train()

class EvalLoop(LoopStack):
    def __init__(self,data_iter):
        self.from_loops(ProgressBar,Tolerate,
                        *events(*EVAL_EVENTS))
        self.new_setting("model","opt","loss","hp","cuda")
        self.__init__(data_iter,)

        @self.EVAL_FORWARD.downstream
        def torch_eval_wrap(self,func):
            with torch.no_grad():
                func()